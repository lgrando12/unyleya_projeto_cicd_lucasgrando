trigger:
- master # Gatilho para a branch master

pool:
  vmImage: 'ubuntu-latest'

# Nossas variáveis
variables:
  dockerRegistryServiceConnection: 'AzureSubscriptionConnection'
  imageRepository: 'azure-vote-front'
  containerRegistry: 'acrunyleyalucasgrando.azurecr.io'
  dockerfilePath: '$(Build.SourcesDirectory)/azure-vote/Dockerfile'
  tag: '$(Build.BuildId)'
  helmChartPath: '$(Build.SourcesDirectory)/azure-vote'

stages:
- stage: Build
  displayName: 'Build and Push Stage'
  jobs:
  - job: Build
    displayName: 'Build e Push da Imagem Docker'
    steps:
    - task: Docker@2
      displayName: 'Build and Push Docker Image to ACR'
      inputs:
        command: buildAndPush
        repository: $(imageRepository)
        dockerfile: $(dockerfilePath)
        # --- LINHAS CORRIGIDAS ABAIXO ---
        azureSubscription: $(dockerRegistryServiceConnection) # <--- CORREÇÃO: Usamos este campo para a conexão 'azurerm'
        containerRegistry: $(containerRegistry)         # <--- CORREÇÃO: Aqui vai a URL do seu ACR
        # --- FIM DA CORREÇÃO ---
        tags: |
          $(tag)
    
    # Publicar o Helm Chart como um artefato
    - task: PublishPipelineArtifact@1
      displayName: 'Publicar Helm Chart'
      inputs:
        targetPath: $(helmChartPath)
        artifact: 'helm-chart'

- stage: Approval
  displayName: 'Aguardando Aprovação'
  dependsOn: Build
  condition: succeeded()
  jobs:
  - job: ManualApproval
    displayName: 'Aprovação Manual'
    pool: server # Este job é especial, roda no servidor do DevOps
    timeoutInMinutes: 4320 # 3 dias
    steps:
    - task: ManualValidation@0
      inputs:
        notifyUsers: 'lucas01grando@gmail.com'
        instructions: 'Por favor, aprove o deploy da aplicação azure-vote para o AKS.'
        onTimeout: 'reject'

- stage: Deploy
  displayName: 'Deploy to AKS Stage'
  dependsOn: Approval # Só roda depois do Approval
  condition: succeeded()
  jobs:
  - job: DeployToAKS
    displayName: 'Deploy Helm Chart no AKS'
    pool:
      vmImage: 'ubuntu-latest' # Roda em um agente normal (que é gratuito)
    steps:
      # Tarefa 1: Baixar o artefato (Helm Chart)
      - task: DownloadPipelineArtifact@2
        displayName: 'Baixar Helm Chart'
        inputs:
          artifact: 'helm-chart'
          path: '$(Pipeline.Workspace)/helm-chart'
      
      # Tarefa 2: Instalar o Helm
      - task: HelmInstaller@1
        displayName: 'Instalar Helm'

      # Tarefa 3: Fazer o Deploy com Helm
      - task: HelmDeploy@0
        displayName: 'Deploy com Helm'
        inputs:
          connectionType: 'Azure Resource Manager'
          azureSubscription: $(dockerRegistryServiceConnection)
          azureResourceGroup: 'rg-unyleya-lucas-grando'
          kubernetesCluster: 'aks-unyleya-lucas-grando'
          command: 'upgrade'
          chartType: 'FilePath'
          chartPath: '$(Pipeline.Workspace)/helm-chart'
          releaseName: 'azure-vote-app'
          arguments: '--set image.repository=$(containerRegistry)/$(imageRepository) --set image.tag=$(tag) --namespace default'